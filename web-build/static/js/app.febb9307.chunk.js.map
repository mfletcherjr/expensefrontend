{"version":3,"sources":["components/Handler.tsx","components/Manager-home.tsx","components/Login-view.tsx","components/Nav-container.tsx","App.tsx"],"names":["RequestHandler","a","async","body","axios","get","response","data","employeeList","uid","patch","message","expense","username","password","employee","ManagerHomePage","useState","setEmployees","handler","ShowAllEmployees","GetRoster","roster","console","log","output","map","item","View","Text","id","fname","lname","expenses","useEffect","style","backgroundColor","padding","height","width","alignItems","justifyContent","flexDirection","flex","Button","onPress","title","LoginView","props","setIndex","loggedIn","setUsername","setPassword","SafeAreaView","TextInput","value","placeholder","onChangeText","u","p","Login","anEmployee","isManager","NavContainer","index","tempEmployee","undefined","fontSize","fontFamily","showNav","App","styles","container","StyleSheet","create"],"mappings":"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","file":"static/js/app.febb9307.chunk.js","sourcesContent":["import { Employee, Expense } from \"./Entities\";\r\nimport { Handler } from \"./Services-dto\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nexport default class RequestHandler implements Handler{\r\n\r\n\r\n\r\n    async GetRoster(): Promise<Employee[]> {\r\n        const body = {}\r\n        const response = await axios.get('http://localhost:5000/employee', body);\r\n\r\n        return response.data.employeeList;\r\n    }\r\n\r\n    async Approve(uid: string): Promise<string> {\r\n        const body = {}\r\n        const response = await axios.patch(`http://localhost:5000/approve/${uid}`,body);\r\n        return response.data.message\r\n        \r\n    }\r\n    async Reject(uid: string): Promise<string> {\r\n        const body = {uid}\r\n        const response = await axios.patch(`http://localhost:5000/reject/${uid}`,body);\r\n        return response.data.message\r\n    }\r\n    async CreateExpense(uid: string, expense: Expense): Promise<Employee> {\r\n        const body = {expense}\r\n        const response = await axios.patch(`http://localhost:5000/expense/${uid}`,body);\r\n\r\n        return response.data.message\r\n    }\r\n    async Login(username: string, password: string): Promise<Employee> {\r\n        const body = {username, password}\r\n        const response = await axios.patch('http://localhost:5000/login', body)\r\n\r\n        return response.data.employee;\r\n    }\r\n\r\n\r\n\r\n\r\n}","import { Text, View, Button,TextInput, Image, ActivityIndicator, ScrollView, Modal, SafeAreaView, FlatList } from \"react-native\";\r\nimport { useState, useEffect } from \"react\";\r\nimport RequestHandler from \"./Handler\";\r\nimport React from \"react\";\r\nimport { Employee } from \"./Entities\";\r\n\r\n\r\nexport function ManagerHomePage(){\r\n    const [employees, setEmployees] = useState<Employee[]>([]);\r\n    const [process, updated] = useState(\"\");\r\n\r\n    const handler = new RequestHandler();\r\n\r\n    useEffect(() => {\r\n        ShowAllEmployees()\r\n        return () => {};},[]);\r\n/** \r\ntakes in an expense and changes state\r\nfrom pending to either approved or rejected\r\noriginal status code is number which returns string value\r\nwould be nice to display stanley for pending/approve/reject states\r\n\r\n*/\r\nasync function UpdateExpense(){\r\n\r\n\r\n\r\n}//end updateExpense\r\n\r\n\r\n/**\r\ncalls up entire employee roster and displays information into a table\r\n\r\nrender order id, fname, lname, username, expense[]\r\n\r\n*/\r\nasync function ShowAllEmployees(){\r\n    \r\n    const roster = await handler.GetRoster()\r\n    setEmployees(roster);\r\n    console.log(roster);\r\n    const output = roster.map((item)=>\r\n    <View>\r\n        <View><Text>Employee Info</Text></View>\r\n    <View><Text>{item.id}</Text></View>\r\n    <View><Text>{item.fname}</Text></View>\r\n    <View><Text>{item.lname}</Text></View>\r\n    <View><Text>{item.expenses}</Text></View>\r\n    </View>\r\n    )\r\n    \r\n    \r\n    return ({output})\r\n\r\n\r\n    \r\n}//end showAllEmployees\r\n\r\n\r\n// useEffect(()=>{\r\n//     handler.GetRoster().then(roster=>setEmployees(roster))\r\n// },[])\r\n\r\n// return(\r\n//      <View>\r\n//     <FlatList data={employees} renderItem={({item})=>DispEmployee(item)} keyExtractor={item=>item.id}/>\r\n//     </View>\r\n\r\n// )\r\n\r\n// function DispEmployee(props:Employee){\r\n//     return(\r\n//     <View>\r\n//         <Text>ID {props.id} First name {props.fname} Last name {props.lname} Expenses {props.expenses} </Text>\r\n//     </View>)\r\n// }\r\n\r\n\r\n\r\nreturn (<View><Text>Manager Home Page</Text>\r\n    <View style={{backgroundColor:\"#4b71bd\", padding:5, height:500, width:1150, alignItems:\"stretch\",justifyContent:\"center\"}}>\r\n        <View style={{flexDirection:\"row\"}}  >\r\n            <View style={{flex:3,backgroundColor:\"#72D6D8\"}}> <Text>Id</Text></View>  \r\n            <View style={{flex:1,backgroundColor:\"#72D6D8\"}}> <Text>First name</Text></View>\r\n            <View style={{flex:1,backgroundColor:\"#72D6D8\"}}> <Text>Last name</Text></View>\r\n            <View style={{flex:1,backgroundColor:\"#72D6D8\"}}> <Text>Expense</Text></View>\r\n            <View style={{flex:1,backgroundColor:\"#72D6D8\"}}> <Text>Description</Text></View>\r\n            <View style={{flex:1,backgroundColor:\"#72D6D8\"}}> <Text>Status</Text></View>\r\n         \r\n        </View>\r\n            <View><Button onPress={()=>ShowAllEmployees()} title=\"Roster\"></Button></View>\r\n\r\n        <View style={{flexDirection:\"row\"}}  >\r\n        <View style={{flex:3,flexDirection:\"row\",backgroundColor:\"white\"}}><Text></Text></View>\r\n        <View style={{flex:1,flexDirection:\"row\",backgroundColor:\"white\"}}><Text></Text></View>\r\n        <View style={{flex:1,flexDirection:\"row\",backgroundColor:\"white\"}}><Text></Text></View>\r\n        <View style={{flex:1,flexDirection:\"row\",backgroundColor:\"white\"}}><Text></Text></View>\r\n        <View style={{flex:1,flexDirection:\"row\",backgroundColor:\"white\"}}><Text></Text></View>\r\n        <View style={{flex:1,flexDirection:\"row\",backgroundColor:\"white\"}}><Text></Text></View>\r\n        </View>\r\n    \r\n    \r\n    \r\n    </View>\r\n    \r\n</View>)\r\n\r\n\r\n\r\n\r\n\r\n\r\n}//end ManagerHomePage","import { useState } from \"react\";\r\nimport { TextInput, View, Text, Button ,SafeAreaView} from \"react-native\";\r\nimport { EmployeeHomePage } from \"./Employee-home\";\r\nimport { Employee } from \"./Entities\";\r\nimport RequestHandler from \"./Handler\";\r\nimport { ManagerHomePage } from \"./Manager-home\";\r\n//import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n//ADAM STUFF\r\nexport default function LoginView(props){\r\n\r\n    const {setIndex, loggedIn} = props;\r\n\r\n    const [username,setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const handler = new RequestHandler();\r\n\r\n    async function loginAttempt() {\r\n        \r\n        // logic to retrieve employee from backend\r\n        // attribute isManager will dictate whether or not\r\n        // loginAttempt will point to Mgr or Emp page\r\n        // upon success\r\n       const anEmployee = await handler.Login(username,password);\r\n       loggedIn(anEmployee);\r\n      // console.log(anEmployee);\r\n        if (anEmployee.isManager) {\r\n            //where we set the employee type\r\n            //render appropriate page response based on type\r\n            //console.log(\"Hello\");\r\n            setIndex(1)\r\n        } else {\r\n            setIndex(2);\r\n        }\r\n        \r\n    }\r\n\r\nreturn(\r\n    <SafeAreaView>\r\n            <TextInput \r\n            style={{\r\n                backgroundColor:'#ffffff'\r\n            }}\r\n              \r\n           // onChangeText={onUsername}\r\n            value={username}\r\n            placeholder=\"Example Username\"\r\n            onChangeText={u=>setUsername(u)}\r\n            />\r\n            <TextInput\r\n            style={{\r\n                backgroundColor:'#ffffff'\r\n            }}  \r\n            value= {password}\r\n            placeholder=\"Example Password\"\r\n            onChangeText={p=>setPassword(p)}\r\n          \r\n             \r\n            />\r\n         \r\n           \r\n           <Button onPress={loginAttempt} title=\"Login\"></Button>\r\n          </SafeAreaView>\r\n\r\n)\r\n}\r\n\r\n\r\n","import { Text, View, Button,TextInput, Image, ActivityIndicator, ScrollView, Modal, SafeAreaView } from \"react-native\";\r\nimport { useState } from \"react\";\r\nimport React from \"react\";\r\nimport { ManagerHomePage } from \"./Manager-home\";\r\nimport { EmployeeHomePage } from \"./Employee-home\";\r\nimport { Employee } from \"./Entities\";\r\nimport LoginView from \"./Login-view\";\r\n\r\n\r\n// export default function LoginView(){ //props:{updateUser:Function}\r\n\r\n//     const [username,setUsername] = useState('')\r\n//     const [password, setPassword] = useState('')\r\n\r\n\r\n\r\nexport default function NavContainer(){//props:Employee?\r\n\r\n    \r\n// props.username\r\n// props.password\r\n    const [index, setIndex] = useState(0);\r\n\r\n    const tempEmployee:Employee={\r\n        id: \"\",\r\n        fname: \"\",\r\n        lname: \"\",\r\n        username: \"\",\r\n        password: \"\",\r\n        expenses: [],\r\n        isManager: undefined\r\n    };\r\n\r\n    const [employee, loggedIn] = useState(tempEmployee)\r\n\r\n    const UserPassInput = (props:Employee) => {\r\n        const [username, onUsername] = React.useState();\r\n        const [password, onPassword] = React.useState();\r\n      \r\n        return (\r\n          <SafeAreaView>\r\n            <TextInput \r\n            style={{\r\n                backgroundColor:'#ffffff'\r\n            }}\r\n              \r\n           // onChangeText={onUsername}????\r\n            value={username}\r\n            placeholder=\"Example Username\"\r\n            />\r\n            <TextInput\r\n            style={{\r\n                backgroundColor:'#ffffff',\r\n                \r\n            }}\r\n            placeholder=\"Example Password\"\r\n           // onChangeText={onPassword}\r\n            value= {password}\r\n             \r\n            />\r\n          </SafeAreaView>\r\n        );\r\n      \r\n    }\r\n\r\n    // function UpdateUser(props:Employee){}\r\n\r\n    function showNav(){\r\n        switch (index) {\r\n\r\n            \r\n            case 0:{\r\n                return (\r\n                    <View><Text style={{fontSize:20, fontFamily:\"Helvetica\"}}>Welcome to Norwegian International Corporate Expense Management Systems</Text>\r\n                    <LoginView setIndex={setIndex} loggedIn={loggedIn}/>\r\n                     {/** gotta resolve this area because this is the login \r\n                      * which triggers case conditional logic to set \"page\"\r\n                      * \r\n                      * \r\n                     */}\r\n                    \r\n                   \r\n                    </View>)\r\n            }\r\n            case 1:{ \r\n\r\n                \r\n                return (\r\n                <View>\r\n                        <ManagerHomePage/>\r\n                </View>)\r\n\r\n            }\r\n            case 2:{\r\n                return(<View><Text>Employee Page</Text><Button onPress={()=>setIndex(2)} title=\"Add Expense\"></Button></View>)\r\n\r\n            }\r\n        \r\n            case 3:{\r\n                return(<View><Text>Create New Expense</Text><Button onPress={()=>setIndex(3)} title=\"Submit expense\"></Button></View>)\r\n            }\r\n            \r\n        }\r\n\r\n\r\n    }\r\n    return<View style={{backgroundColor:\"#4b71bd\", padding:5, height:800, width:1300, alignItems:\"center\",justifyContent:\"center\"}}>{showNav()} </View>\r\n    \r\n\r\n\r\n\r\n}//end NavContainer\r\n\r\n\r\n","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { EmployeeHomePage } from './components/Employee-home';\nimport { ManagerHomePage } from './components/Manager-home';\nimport LoginView from './components/Nav-container';\nimport  NavContainer  from './components/Nav-container';\n\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n    <NavContainer />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#4b71bd',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"sourceRoot":""}